
package alpha.only.packages.with.periods;

// The basic way to define a new type is with "type":
// its just like a c struct. 
type TypeName {
  // A type - builtin types are all lowercase, and include:
  //   string
  //   int{8,16,32,64}
  //   uint{8,16,32,64}
  //   bool
  //   list[T]
  myId int32;

  // types can be nested!
  type NestedType {
    foo string;
    bar string;
    baz uint64;
  };
  subInstances list[NestedType];

  // Enums are the second way of defining a new type. It's values don't have
  // types.
  enum SomeEnumType {
    firstValue;
    secondValue;
    thirdValue;
  };
  typeOfMyself SomeEnumValue;

  // Unions are the third and final type. Only one of the values is real,
  // and it _must_ be checked before using it.
  union NameOrId{
    name string;
    uniqueId int32;
  };
  myBetterId NameOrId;
};